# Collection represents tokens contract.
type Collection {
    # Address of the token contract
    contract: Address!

    # Name of the token contract
    name: String!

    # Description of the token contract
    symbol: String!    

    # Description of the token contract
    description: String!

    # Categories IDs of the collection
    categories: [Int!]!

    # IPFS hash of the collection image
    image: String!

    # Owner of the collection
    owner: Address

    # Owner of the collection
    ownerUser: User

    # Recipient of royalty transfer fee
    feeRecipient: Address

    # Recipient of royalty transfer fee
    feeRecipientUser: User

    # Royalty - fee in percents (with decimals)
    royalty: String!

    # Social: E-mail
    email: String!

    # Social: Site URL
    site: String!

    # Social: Discord URL
    discord: String!

    # Social: Telegram URL
    telegram: String!

    # Social: Medium URL
    medium: String!

    # Social: Twitter URL
    twitter: String!

    # Social: Instagram URL
    instagram: String!

    # Time when was the collection registered
    createdTime: Time!

    # Time when was the collection approved/banned/unbanned
    changedTime: Time

    # Allows marketplace user to mint an item
    isPublicMintable: Boolean!    

    # Is from our factory
    isInternal: Boolean!    

    # Is verified
    isVerified: Boolean!        

    # Is ownerOnly
    IsOwnerOnly: Boolean!          

    # contract is Erc1155 instead of Erc721
    isErc1155: Boolean!      

    # Erc721 contract has its own uri already set for items minting (Erc1155 must already have a base uri)
    hasBaseUri: Boolean!     

    # collection items cap (0 if not set)
    maxItems: BigInt   

    # Erc1155 collection max item replica (0 if not set)
    maxItemCount: BigInt    

    # Time when mint could start (0 if not set)
    mintStartTime: Time  

    # Time when mint must end (0 if not set)
    mintEndTime: Time      

    # Time when real uri will be shown (0 if not set)
    revealTime: Time      

    # canMint checks if the given user address can create new tokens on the collection
    canMint(user:Address!, fee: BigInt): Boolean!
}

type CollectionEdge {
    cursor: Cursor!
    node: Collection!
}

type CollectionConnection {
    # Edges contains provided edges of the sequential list.
    edges: [CollectionEdge!]!

    # TotalCount is the total amount of items in the list.
    totalCount: BigInt!

    # PageInfo is an information about the current page of the list.
    pageInfo: PageInfo!
}
